{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///Users/sammcnab/github/workload-wizard-app/src/lib/actions/userActions.ts"],"sourcesContent":["'use server';\n\nimport { clerkClient } from '@clerk/nextjs/server';\nimport { currentUser } from '@clerk/nextjs/server';\nimport { revalidatePath } from 'next/cache';\n\n// Ensure clerkClient is properly initialized\nconst client = clerkClient;\n\nexport interface InviteUserData {\n  email: string;\n  role: 'admin' | 'lecturer' | 'staff';\n  organisationId: string;\n}\n\nexport async function inviteUser(data: InviteUserData) {\n  const currentUserData = await currentUser();\n  \n  if (!currentUserData || currentUserData.publicMetadata?.role !== 'admin') {\n    throw new Error('Unauthorized: Admin access required');\n  }\n\n  try {\n    // For now, just log the invitation since Clerk's API might need different setup\n    // In production, you'd implement proper user creation and invitation\n    console.log('Would invite user:', {\n      email: data.email,\n      role: data.role,\n      organisationId: data.organisationId,\n    });\n\n    revalidatePath('/admin/users');\n    return { success: true, userId: 'mock-user-id' };\n  } catch (error) {\n    console.error('Error inviting user:', error);\n    throw new Error('Failed to invite user');\n  }\n}\n\nexport async function listUsers() {\n  const currentUserData = await currentUser();\n  \n  if (!currentUserData || currentUserData.publicMetadata?.role !== 'admin') {\n    throw new Error('Unauthorized: Admin access required');\n  }\n\n  try {\n    // For now, return current user as a mock list\n    // In production, you'd implement proper user listing via Clerk's API\n    return [\n      {\n        id: currentUserData.id,\n        email: currentUserData.emailAddresses[0]?.emailAddress,\n        firstName: currentUserData.firstName,\n        lastName: currentUserData.lastName,\n        role: currentUserData.publicMetadata?.role as string,\n        organisationId: currentUserData.publicMetadata?.organisationId as string,\n        createdAt: currentUserData.createdAt,\n        lastSignInAt: currentUserData.lastSignInAt,\n      }\n    ];\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    throw new Error('Failed to fetch users');\n  }\n}\n\nexport async function deleteUser(userId: string) {\n  const currentUserData = await currentUser();\n  \n  if (!currentUserData || currentUserData.publicMetadata?.role !== 'admin') {\n    throw new Error('Unauthorized: Admin access required');\n  }\n\n  try {\n    await client.users.deleteUser(userId);\n    revalidatePath('/admin/users');\n    return { success: true };\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    throw new Error('Failed to delete user');\n  }\n} "],"names":[],"mappings":";;;;;;AAEA;AACA;AACA;;;;;;AAEA,6CAA6C;AAC7C,MAAM,SAAS,yKAAA,CAAA,cAAW;AAQnB,eAAe,WAAW,IAAoB;IACnD,MAAM,kBAAkB,MAAM,CAAA,GAAA,0LAAA,CAAA,cAAW,AAAD;IAExC,IAAI,CAAC,mBAAmB,gBAAgB,cAAc,EAAE,SAAS,SAAS;QACxE,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,gFAAgF;QAChF,qEAAqE;QACrE,QAAQ,GAAG,CAAC,sBAAsB;YAChC,OAAO,KAAK,KAAK;YACjB,MAAM,KAAK,IAAI;YACf,gBAAgB,KAAK,cAAc;QACrC;QAEA,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,QAAQ;QAAe;IACjD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,kBAAkB,MAAM,CAAA,GAAA,0LAAA,CAAA,cAAW,AAAD;IAExC,IAAI,CAAC,mBAAmB,gBAAgB,cAAc,EAAE,SAAS,SAAS;QACxE,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,8CAA8C;QAC9C,qEAAqE;QACrE,OAAO;YACL;gBACE,IAAI,gBAAgB,EAAE;gBACtB,OAAO,gBAAgB,cAAc,CAAC,EAAE,EAAE;gBAC1C,WAAW,gBAAgB,SAAS;gBACpC,UAAU,gBAAgB,QAAQ;gBAClC,MAAM,gBAAgB,cAAc,EAAE;gBACtC,gBAAgB,gBAAgB,cAAc,EAAE;gBAChD,WAAW,gBAAgB,SAAS;gBACpC,cAAc,gBAAgB,YAAY;YAC5C;SACD;IACH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe,WAAW,MAAc;IAC7C,MAAM,kBAAkB,MAAM,CAAA,GAAA,0LAAA,CAAA,cAAW,AAAD;IAExC,IAAI,CAAC,mBAAmB,gBAAgB,cAAc,EAAE,SAAS,SAAS;QACxE,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,MAAM,OAAO,KAAK,CAAC,UAAU,CAAC;QAC9B,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,MAAM,IAAI,MAAM;IAClB;AACF;;;IAnEsB;IAwBA;IA4BA;;AApDA,+OAAA;AAwBA,+OAAA;AA4BA,+OAAA","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///Users/sammcnab/github/workload-wizard-app/src/app/admin/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/users/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/users/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgS,GAC7T,8DACA","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///Users/sammcnab/github/workload-wizard-app/src/app/admin/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/users/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/users/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4Q,GACzS,0CACA","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}