# âœ… Todayâ€™s MVP Sprint (foundations â†’ first allocations)

> **Outcome by EOD:** you can create a course + year, attach modules, create an iteration for the current academic year, make groups, and allocate a lecturer â€” with year visibility (draft vs published) enforced.

---

**PR:** `feat: global year switcher (role-aware)` â†’ merge to `dev`.

---

## 3) Courses & course years (definitions)

**New branch:**

```bash
git checkout dev
git pull
git checkout -b feature/courses-and-years
```

**Do:**

* Convex: `courses` (code, name, orgId) + `course_years` (courseId, yearNumber).
* UI `/courses`: create/list courses.
* Course detail: **Years** tab (add Y1/Y2/â€¦).

**Accept:**

* Can create a course, add Year 1.

**Git:**

```bash
git add .
git commit -m "feat(courses): schema + CRUD; course years tab"
git push -u origin feature/courses-and-years
```

**PR:** `feat: courses & course years` â†’ merge to `dev`.

---

## 4) Modules and link to course years

**New branch:**

```bash
git checkout dev
git pull
git checkout -b feature/modules-and-linking
```

**Do:**

* Convex: `modules` (code, name, credits, orgId).
* Join table `course_year_modules` (courseYearId, moduleId, isCore).
* UI `/modules`: list/create.
* In course year view: attach/detach modules.

**Accept:**

* Can attach Module A to Course X, Year 1.

**Git:**

```bash
git add .
git commit -m "feat(modules): schema + CRUD; link modules to course years"
git push -u origin feature/modules-and-linking
```

**PR:** `feat: modules + course-year linking` â†’ merge to `dev`.

---

## 5) Module iterations for the selected academic year

**New branch:**

```bash
git checkout dev
git pull
git checkout -b feature/module-iterations-ay
```

**Do:**

* Convex: `module_iterations` (moduleId, academicYearId, totalHours? optional).
* UI: from a course yearâ€™s attached modules, **create iteration for current AY**.

**Accept:**

* For AY 25/26 you can create Module A (Iteration #1).

**Git:**

```bash
git add .
git commit -m "feat(iterations): create module iterations per academic year"
git push -u origin feature/module-iterations-ay
```

**PR:** `feat: module iterations for selected AY` â†’ merge to `dev`.

---

## 6) Groups for an iteration (basic planner)

**New branch:**

```bash
git checkout dev
git pull
git checkout -b feature/groups-basic
```

**Do:**

* Convex: `module_groups` (moduleIterationId, name, campusId?, sizePlanned, dayOfWeek?, weekPattern?).
* UI: on an iteration, **Add Group** (start simple: manual count; campus optional today).
* Show groups list under the iteration.

> auto-splitting by cohort size can come tomorrow; manual first keeps momentum.

**Accept:**

* Create 2â€“3 groups under Module A (Iteration #1).

**Git:**

```bash
git add .
git commit -m "feat(groups): groups under module iteration (manual, MVP)"
git push -u origin feature/groups-basic
```

**PR:** `feat: module groups (manual create) under iterations` â†’ merge to `dev`.

---

## 7) Allocate lecturer to a group (first allocation)

**New branch:**

```bash
git checkout dev
git pull
git checkout -b feature/group-allocations-mvp
```

**Do:**

* Convex: `group_allocations` (groupId, lecturerId, hoursComputed, hoursOverride?, type:'teaching'|'admin', academicYearId, orgId).
* Calculation (MVP): derive hours via module credits + multiplier OR allow manual override (save both).
* UI: on a group, **Assign Lecturer** dialog (pick lecturer, see computed hours, allow override).

**Accept:**

* Assign a lecturer to a group; allocation appears and persists.

**Git:**

```bash
git add .
git commit -m "feat(allocations): assign lecturer to group with computed/override hours"
git push -u origin feature/group-allocations-mvp
```

**PR:** `feat: lecturer â†’ group allocations (MVP)` â†’ merge to `dev`.

---

## 8) Staff capacity roll-up (list view)

**New branch:**

```bash
git checkout dev
git pull
git checkout -b feature/staff-capacity-rollup
```

**Do:**

* Calc util: `computeLecturerTotals(lecturerId, academicYearId)`:

  * totalContract (FTE Ã— base, or override)
  * maxTeaching (by contract type AP/TA/RA Ã— FTE, or override)
  * allocatedTeaching (sum group allocations)
  * allocatedAdmin (from admin allocations if present; else 0 today)
  * allocatedTotal, availableTeaching, capacity, overload flag
* UI `/staff`: table with bars (green/amber/red).

**Accept:**

* See totals update after you allocate someone to a group.

**Git:**

```bash
git add .
git commit -m "feat(staff): capacity roll-up and list view for selected AY"
git push -u origin feature/staff-capacity-rollup
```

**PR:** `feat: staff capacity roll-up (AY-scoped)` â†’ merge to `dev`.

---

## 9) Release to dev preview

```bash
git checkout dev
git pull
# merge PRs should already have gone in step-by-step
# Vercel preview should build automatically from dev
```

**Tag (optional):**

```bash
git tag v0.3.1-mvp-slice-1
git push origin v0.3.1-mvp-slice-1
```

---

## âœ… Definition of Done (today)

* You can:

  * switch to **AY 25/26** and **see** content as staff;
  * keep **AY 26/27** in **draft** visible only to management.
* Create **Course â†’ Year â†’ Module â†’ Iteration â†’ Groups**.
* Allocate a **Lecturer** to a **Group** and see hours reflected in **/staff** totals.

---

## ðŸ§¹ Commit/PR hygiene (repeat for each branch)

* Use **Conventional Commits** (`feat`, `fix`, `chore`, `docs`, `refactor`, `test`).
* Small, focused commits; descriptive scope:
  `feat(groups): add create/list UI under iteration`
* Open **Draft PR** immediately and keep pushing to it.
* PR template checklist:

  * [ ] Org & AY scoping enforced
  * [ ] Permission checks on server + UI guard
  * [ ] Audit entries added (create/update/delete)
  * [ ] Indexes added for new queries
  * [ ] Screenshots/GIF of UI

---
